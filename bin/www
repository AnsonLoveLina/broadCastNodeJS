#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var broadcast = require('../broadcast');
var debug = require('debug')('testexpress:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var pingInterval = process.env.pingInterval || '10000';
var pingTimeout = process.env.pingTimeout || '5000';

var executeTasks = require("../dataChange/notification");

var io = require('socket.io')();

io.attach(server, {
    //间隔时间ping客户端
    pingInterval: pingInterval,
    //假如客户端ping超时则关闭链接
    pingTimeout: pingTimeout,
    cookie: false
});

var receiveTask = {
    "sql": "select ug.user_id, count(1) " +
    "from T_TASK t,T_USER_GROUP ug " +
    "where instr(t.receive_group_id, ug.group_id) > 0 " +
    "and t.delete_state = '0' " +
    "and t.receive_state = 0 " +
    "group by ug.user_id ", "eventName": "receive", "defaultData": "0", "resultHandle": function (result) {
        var task = receiveTask;
        for (var i = 0; i < result.rows.length; i++) {
            var key = result.rows[i][0];
            var value = result.rows[i][1];
            if (task.preData) {
                if (task.preData[key] && value != task.preData[key]) {
                    console.log(key + "，对应数据发生变化：" + value + "，之前的：" + task.preData[key]);
                    io.sockets.to(key).emit(task.eventName, value);
                } else if (!task.preData[key]) {
                    console.log(key + "，对应数据从未产生：" + value);
                    io.sockets.to(key).emit(task.eventName, value);
                }
            } else if (!task.preData) {
                task.preData = {};
                console.log(key + ",对应数据从未产生：" + value);
                io.sockets.to(key).emit(task.eventName, value);
            }
            task.preData[key] = value;
        }
    }
};

var feedbackTask = {
    "sql": "select ug.user_id,count(1) " +
    "from T_TASK t,T_USER_GROUP ug " +
    "where instr(t.receive_group_id, ug.group_id) > 0 " +
    "and t.delete_state = '0' " +
    "and t.reminder_state = 1 " +
    "group by ug.user_id ", "eventName": "feedback", "defaultData": "0", "resultHandle": function (result) {
        var task = feedbackTask;
        for (var i = 0; i < result.rows.length; i++) {
            var key = result.rows[i][0];
            var value = result.rows[i][1];
            if (task.preData) {
                if (task.preData[key] && value != task.preData[key]) {
                    console.log(key + "，对应数据发生变化：" + value + "，之前的：" + task.preData[key]);
                    io.sockets.to(key).emit(task.eventName, value);
                } else if (!task.preData[key]) {
                    console.log(key + "，对应数据从未产生：" + value);
                    io.sockets.to(key).emit(task.eventName, value);
                }
            } else if (!task.preData) {
                task.preData = {};
                console.log(key + ",对应数据从未产生：" + value);
                io.sockets.to(key).emit(task.eventName, value);
            }
            task.preData[key] = value;
        }
    }
};

var reminderTask = {
    "sql": "select t.create_id,COUNT(1) " +
    "from T_TASK t, T_TASK_FEEDBACK f " +
    "where t.id = f.task_id " +
    "and f.feedback_state = 0 " +
    "and t.delete_state = 0 " +
    "and f.delete_state = 0 " +
    "group by t.create_id", "eventName": "reminder", "defaultData": "0", "resultHandle": function (result) {
        var task = reminderTask;
        for (var i = 0; i < result.rows.length; i++) {
            var key = result.rows[i][0];
            var value = result.rows[i][1];
            if (task.preData) {
                if (task.preData[key] && value != task.preData[key]) {
                    console.log(key + "，对应数据发生变化：" + value + "，之前的：" + task.preData[key]);
                    io.sockets.to(key).emit(task.eventName, value);
                } else if (!task.preData[key]) {
                    console.log(key + "，对应数据从未产生：" + value);
                    io.sockets.to(key).emit(task.eventName, value);
                }
            } else if (!task.preData) {
                task.preData = {};
                console.log(key + ",对应数据从未产生：" + value);
                io.sockets.to(key).emit(task.eventName, value);
            }
            task.preData[key] = value;
        }
    }
};

tasks = [receiveTask, feedbackTask, reminderTask];

executeTasks();

broadcast(io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
